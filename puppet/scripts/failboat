#!/bin/bash

#    __      _ _ _                 _
#   / _|    (_) | |               | |
#  | |_ __ _ _| | |__   ___   __ _| |_
#  |  _/ _` | | | '_ \ / _ \ / _` | __|
#  | || (_| | | | |_) | (_) | (_| | |_
#  |_| \__,_|_|_|_.__/ \___/ \__,_|\__|

VERSION=0.1

######################################################
#
# Usage Command
#
######################################################

usage() {
    echo "Usage: $0 [-h] [-v] [command] [args]"
    echo "  -h  Help. Display this message and quit."
    echo "  -v  Version. Print version number and quit."
    exit
}

######################################################
#
# Hoist Command
#
######################################################

hoist() {
    PHP_VERSION=$1

    RESET=$2
    POSTFIX=
    EXTRA_FLAGS=

    SRC_DIR=/home/vagrant/src
    PHP_DIR=${SRC_DIR}/php-${PHP_VERSION}

    # PHP Version Required.
    if [ -z $PHP_VERSION ]; then
        hoist-usage
    fi

    # Whether or not to reset the download archive.
    if [ -z $RESET ]; then
        RESET=0
    fi

    # Create the source directory if it doesn't exist.
    if [ ! -d $SRC_DIR ]; then
        mkdir -p ${SRC_DIR}
    fi

    cd $SRC_DIR

    # If source file isn't downloaded, then we downloads it.
    if [ ! -f "php-${PHP_VERSION}.tar.gz" ]; then
        RESET=1
    fi

    # Retrieve PHP source package.
    if [ $RESET -eq 1 ]; then
        echo "Downloading php-${PHP_VERSION}.tar.gz..."

        RESPONSE=$(curl --write-out %{http_code} --silent --head --output /dev/null http://museum.php.net/php5/php-${PHP_VERSION}.tar.gz)
        echo $RESPONSE

        # Check mirror if package doesn't exit. Otherwise, retry museum.
        if [ $RESPONSE -eq 404 ]; then
            wget -O php-${PHP_VERSION}.tar.gz http://us2.php.net/get/php-${PHP_VERSION}.tar.gz/from/this/mirror
        else
            wget -O php-${PHP_VERSION}.tar.gz http://museum.php.net/php5/php-${PHP_VERSION}.tar.gz
        fi

        # Verify file was downloaded.
        if [ ! -f php-${PHP_VERSION}.tar.gz ]; then
            echo "Could not find php-${PHP_VERSION}.tar.gz. Jumping ship!"
            exit
        fi

        rm -rf ${PHP_DIR}
        tar -zxf php-${PHP_VERSION}.tar.gz
    fi

    cd $PHP_DIR
    echo "Configuring ${PHP_VERSION} in $PHP_DIR"

    # Configure
    OPTIONS="--with-libdir=lib64 \
             --with-layout=PHP \
             --with-pear \
             --with-apxs2 \
             --enable-calendar \
             --enable-bcmath \
             --with-gmp \
             --enable-exif \
             --with-mcrypt \
             --with-mhash \
             --with-zlib \
             --with-bz2 \
             --enable-zip \
             --enable-ftp \
             --enable-mbstring \
             --with-iconv \
             --enable-intl \
             --with-icu-dir=/usr \
             --with-gettext \
             --with-pspell \
             --enable-sockets \
             --with-openssl \
             --with-curl \
             --with-curlwrappers \
             --with-gd \
             --enable-gd-native-ttf \
             --with-jpeg-dir=/usr \
             --with-png-dir=/usr \
             --with-zlib-dir=/usr \
             --with-xpm-dir=/usr \
             --with-vpx-dir=/usr \
             --with-freetype-dir=/usr \
             --with-t1lib=/usr \
             --with-libxml-dir=/usr \
             --with-mysql=mysqlnd \
             --with-mysqli=mysqlnd \
             --with-pdo-mysql=mysqlnd \
             --enable-soap \
             --with-xmlrpc \
             --with-xsl \
             --with-tidy=/usr \
             --with-readline \
             --enable-pcntl \
             --enable-sysvshm \
             --enable-sysvmsg \
             --enable-shmop"

    sudo mkdir -p /usr/local/php/${PHP_VERSION}
    ./configure --prefix=/usr/local/php/${PHP_VERSION} ${OPTIONS}

    # Build and Install
    echo "Building ${PHP_VERSION} in ${PHP_DIR}"
    make -j 5

    echo "Installing ${PHP_VERSION} in ${PHP_DIR}"
    sudo make install

    echo ""
    echo "PHP version ${PHP_VERSION} is now installed. Type: $0 turn ${PHP_VERSION}"
    echo ""
}

hoist-usage() {
    echo "Usage: $0 hoist [version]"
    echo "  e.g. $0 hoist 5.3.3"
    exit
}

######################################################
#
#
#
######################################################

function turn () {
    if [ "$1" == "reset" ]; then
        sudo rm /usr/local/bin/php
    else
        sudo ln -s /usr/local/php/$1/bin/php /usr/local/bin/php
    fi
}

turn-usage() {
    echo "Usage: $0 turn [version]"
    echo "  e.g. $0 turn 5.3.3"
    exit
}

######################################################
#
# Execute Command Wrapper
#
######################################################

optspec="hvf:"
while getopts "$optspec" optchar
do
    case "${optchar}" in
        h)
            usage
            exit
            ;;
        v)
            echo "Version $VERSION";
            exit
            ;;
        *)
            usage
            shift
            ;;
    esac
done

# Fail if no commands provided.
if [ -z $1 ]; then
    usage
    exit
fi

# Store function name and shift args.
FUNC_NAME=${1}
shift

# Call function name with remaining args.
${FUNC_NAME} $@
