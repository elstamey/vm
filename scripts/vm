#!/bin/bash

VERSION=0.1

######################################################
#
# Usage Command
#
######################################################

usage() {
    echo "Usage: $0 [-h] [-v] [command] [args]"
    echo "  -h  Help. Display this message and quit."
    echo "  -v  Version. Print version number and quit."
    exit
}

######################################################
#
# Serve path with environment variable
#
######################################################

function serve () {
    if [[ $1 == "." ]]; then
        path=$(pwd)
    elif [ -z $1 ]; then
        path=$(pwd)
    elif [[ $1 == "reset" ]]; then
        path="/var/www/html"
    else
        path=$(readlink -e $1)
    fi

    if [ ! -z $2 ]; then
        env=$2
    else
        env="local"
    fi

    # If path is not a directory, bail.
    if [ ! -d "$path" ] && [ ! -f "$path" ]; then
        echo "Error: $path is not a valid directory or file."
        echo ""

        serve-usage
    fi

    # This is brittle. No checking to make sure this is actually a vhost configuration.
    # Probably should start thinking about a PHAR or something more robust for a CLI utility.
    if [ -f "$path" ]; then
vhost=$(cat $path)
    else
vhost="<VirtualHost *:80>
   ServerName localhost
   DocumentRoot $path
   <Directory \"$path\">
       Options Indexes FollowSymLinks MultiViews
       AllowOverride All
       Order allow,deny
       Allow from all
   </Directory>
   SetEnv APP_ENV $env
</VirtualHost>
<VirtualHost *:443>
   ServerName localhost
   DocumentRoot $path
   SSLEngine on
   SSLCertificateFile /etc/httpd/ssl/ssl.crt
   SSLCertificateKeyFile /etc/httpd/ssl/ssl.key
   <Directory \"$path\">
       Options Indexes FollowSymLinks MultiViews
       AllowOverride All
       Order allow,deny
       Allow from all
   </Directory>
   SetEnv APP_ENV $env
</VirtualHost>"
    fi

    echo "Serving $path"
    echo "$vhost" | sudo tee /etc/httpd/conf.d/default.conf >/dev/null

    echo "Restarting the web server"
    sudo /sbin/service httpd restart
}

serve-usage() {
    echo "Usage: $0 serve [valid-path]"
    echo "  e.g. $0 serve ."
    exit
}

######################################################
#
# Execute Command Wrapper
#
######################################################

optspec="hvf:"
while getopts "$optspec" optchar
do
    case "${optchar}" in
        h)
            usage
            exit
            ;;
        v)
            echo "Version $VERSION";
            exit
            ;;
        *)
            usage
            shift
            ;;
    esac
done

# Fail if no commands provided.
if [ -z $1 ]; then
    usage
    exit
fi

# Store function name and shift args.
FUNC_NAME=${1}
shift

# Call function name with remaining args.
${FUNC_NAME} $@
